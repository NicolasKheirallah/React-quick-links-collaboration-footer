"use strict";(self["webpackJsonp_6638da67-06f4-4f55-a1df-485d568e8b72_8.0.0.0"]=self["webpackJsonp_6638da67-06f4-4f55-a1df-485d568e8b72_8.0.0.0"]||[]).push([[551],{551:(e,t,n)=>{n.d(t,{LegacyFooterService:()=>r});var a=n(9676);const i="LegacyFooterService";class r{constructor(e,t){this.context=e,this.config=t,a.Log.info(i,"LegacyFooterService initialized for backward compatibility")}async getSharedLinks(){try{if(!this.config.sourceTermSet)return a.Log.warn(i,"No sourceTermSet configured for legacy taxonomy service"),[];const e=new(0,n(6431).A)(this.context),t=(await e.getTermsFromTermSet(this.config.sourceTermSet)).map((e,t)=>{var n,a;return{id:parseInt(e.Id)||t,title:e.Name||"Unnamed Link",url:(null===(n=e.LocalCustomProperties)||void 0===n?void 0:n._Sys_Nav_SimpleLinkUrl)||"#",description:e.Description||"",iconName:(null===(a=e.LocalCustomProperties)||void 0===a?void 0:a["PnP-CollabFooter-Icon"])||"Link",order:t,isActive:!0}});return a.Log.info(i,`Retrieved ${t.length} shared links from taxonomy`),t}catch(e){return a.Log.error(i,e),[]}}async getPersonalLinks(){try{if(!this.config.personalItemsStorageProperty)return a.Log.warn(i,"No personalItemsStorageProperty configured for legacy user profile service"),[];const e=new(0,n(878).A)(this.context),t=await e.getUserProfileProperty(this.config.personalItemsStorageProperty);if(!t)return a.Log.info(i,"No personal links found in user profile"),[];const r=decodeURIComponent(t),o=JSON.parse(r).map((e,t)=>({id:t,userId:"current-user",title:e.title||e.name||"Unnamed Link",url:e.url||e.href||"#",description:e.description||"",iconName:e.iconName||"Link",order:t,isActive:!0}));return a.Log.info(i,`Retrieved ${o.length} personal links from user profile`),o}catch(e){return a.Log.error(i,e),[]}}async savePersonalLinks(e){try{if(!this.config.personalItemsStorageProperty)return a.Log.warn(i,"No personalItemsStorageProperty configured for saving"),!1;const t=e.map(e=>({key:`link-${e.title}-${e.url}-${Date.now()}`,title:e.title,url:e.url})),r=new(0,n(878).A)(this.context),o=JSON.stringify(t),s=encodeURIComponent(o);return await r.setUserProfileProperty(this.config.personalItemsStorageProperty,"String",s),a.Log.info(i,`Successfully saved ${e.length} personal links to user profile`),!0}catch(e){return a.Log.error(i,e),!1}}async getSharedMenuItems(){try{return(await this.getSharedLinks()).map(e=>({key:`shared-${e.id}`,name:e.title,href:e.url,title:e.description,iconProps:{iconName:e.iconName||"Link"},target:"_blank"}))}catch(e){return a.Log.error(i,e),[]}}async getPersonalMenuItems(){try{return(await this.getPersonalLinks()).map(e=>({key:`personal-${e.id||e.title}`,name:e.title,href:e.url,title:e.description,iconProps:{iconName:e.iconName||"Link"},target:"_blank"}))}catch(e){return a.Log.error(i,e),[]}}}}
,6431:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(9676),i=n(1909);const r="SPTaxonomyService";class o{constructor(e){this.context=e,this.formDigest="",this.formDigestExpiry=0;const t=this.context.pageContext.web.absoluteUrl;this.clientServiceUrl=`${t}/_vti_bin/client.svc/ProcessQuery`,this.contextInfoUrl=`${t}/_api/contextinfo`}async getFormDigest(){const e=Date.now();if(this.formDigest&&e<this.formDigestExpiry)return this.formDigest;const t={headers:{Accept:"application/json","Content-Type":"application/json"}};try{const n=await this.context.spHttpClient.post(this.contextInfoUrl,i.SPHttpClient.configurations.v1,t);if(!n.ok)throw new Error(`Error fetching context info: ${n.status} ${n.statusText}`);const a=await n.json(),r=a.FormDigestValue,o=a.FormDigestTimeoutSeconds||1800;if(!r)throw new Error("FormDigestValue is missing in the context info response.");return this.formDigest=r,this.formDigestExpiry=e+1e3*o,this.formDigest}catch(e){throw a.Log.error(r,e),e}}async getTermsFromTermSet(e,t=1033){if(a.Environment.type!==a.EnvironmentType.SharePoint&&a.Environment.type!==a.EnvironmentType.ClassicSharePoint)return a.Log.warn(r,"Not running in a SharePoint environment"),[];try{await this.getFormDigest();const n=this.buildTermSetRequest(e,t),a={headers:{Accept:"application/json","Content-Type":"text/xml","X-RequestDigest":this.formDigest},body:n},r=await this.context.spHttpClient.post(this.clientServiceUrl,i.SPHttpClient.configurations.v1,a);if(!r.ok)throw new Error(`Error fetching terms from term set: ${r.status} ${r.statusText}`);const o=await r.json();return await this.processTermSetResponse(o)}catch(e){return a.Log.error(r,e),[]}}buildTermSetRequest(e,t){return`\n      <Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0"\n        LibraryVersion="16.0.0.0" ApplicationName="JavaScript Client"\n        xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">\n        <Actions>\n          <ObjectPath Id="2" ObjectPathId="1" />\n          <ObjectIdentityQuery Id="3" ObjectPathId="1" />\n          <ObjectPath Id="5" ObjectPathId="4" />\n          <ObjectIdentityQuery Id="6" ObjectPathId="4" />\n          <ObjectPath Id="8" ObjectPathId="7" />\n          <Query Id="9" ObjectPathId="7">\n            <Query SelectAllProperties="false">\n              <Properties />\n            </Query>\n            <ChildItemQuery SelectAllProperties="false">\n              <Properties>\n                <Property Name="Terms" SelectAll="true">\n                  <Query SelectAllProperties="false">\n                    <Properties />\n                  </Query>\n                </Property>\n              </Properties>\n            </ChildItemQuery>\n          </Query>\n        </Actions>\n        <ObjectPaths>\n          <StaticMethod Id="1" Name="GetTaxonomySession" TypeId="{981cbc68-9edc-4f8d-872f-71146fcbb84f}" />\n          <Method Id="4" ParentId="1" Name="GetDefaultSiteCollectionTermStore" />\n          <Method Id="7" ParentId="4" Name="GetTermSetsByName">\n            <Parameters>\n              <Parameter Type="String">${this.escapeXml(e)}</Parameter>\n              <Parameter Type="Int32">${t}</Parameter>\n            </Parameters>\n          </Method>\n        </ObjectPaths>\n      </Request>`}async processTermSetResponse(e){const t=e.filter(e=>e&&"SP.Taxonomy.TermSetCollection"===e._ObjectType_);if(t.length>0){const e=t[0]._Child_Items_[0].Terms._Child_Items_;return await Promise.all(e.map(async e=>this.expandTerm(e)))}return a.Log.warn(r,"No term sets found in the response"),[]}async expandTerm(e){var t,n;const a=await this.getChildTerms(e);return e.CustomProperties=null!==(t=e.CustomProperties)&&void 0!==t?t:null,e.Id=this.cleanGuid(e.Id),e.LocalCustomProperties=null!==(n=e.LocalCustomProperties)&&void 0!==n?n:null,e.Terms=a,e.TermsCount=a.length,e.PathDepth=e.PathOfTerm.split(";").length,e}async getChildTerms(e){if(e.TermsCount>0){const t=this.buildChildTermsRequest(e._ObjectIdentity_),n={headers:{Accept:"application/json","Content-Type":"text/xml","X-RequestDigest":this.formDigest},body:t};try{const e=await this.context.spHttpClient.post(this.clientServiceUrl,i.SPHttpClient.configurations.v1,n);if(!e.ok)throw new Error(`Error fetching child terms: ${e.status} ${e.statusText}`);const t=(await e.json()).filter(e=>e&&"SP.Taxonomy.TermCollection"===e._ObjectType_);return t.length>0?await Promise.all(t[0]._Child_Items_.map(async e=>this.expandTerm(e))):(a.Log.warn(r,"No child terms found in the response"),[])}catch(e){return a.Log.error(r,e),[]}}return[]}buildChildTermsRequest(e){return`\n      <Request AddExpandoFieldTypeSuffix="true" SchemaVersion="15.0.0.0" LibraryVersion="16.0.0.0" ApplicationName=".NET Library"\n        xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">\n        <Actions>\n          <ObjectPath Id="20" ObjectPathId="19" />\n          <Query Id="21" ObjectPathId="19">\n            <Query SelectAllProperties="false">\n              <Properties />\n            </Query>\n            <ChildItemQuery SelectAllProperties="true">\n              <Properties>\n                <Property Name="CustomSortOrder" ScalarProperty="true" />\n                <Property Name="CustomProperties" ScalarProperty="true" />\n                <Property Name="LocalCustomProperties" ScalarProperty="true" />\n              </Properties>\n            </ChildItemQuery>\n          </Query>\n        </Actions>\n        <ObjectPaths>\n          <Property Id="19" ParentId="16" Name="Terms" />\n          <Identity Id="16" Name="${this.escapeXml(e)}" />\n        </ObjectPaths>\n      </Request>`}cleanGuid(e){return e?e.replace("/Guid(","").replace("/","").replace(")",""):""}escapeXml(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}}}
,878:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(9676),i=n(1909);const r="SPUserProfileService";class o{constructor(e){this.context=e,this.formDigest="";const t=this.context.pageContext.web.absoluteUrl;this.clientServiceUrl=`${t}/_vti_bin/client.svc/ProcessQuery`,this.contextInfoUrl=`${t}/_api/contextinfo`}async getFormDigest(){const e={headers:{Accept:"application/json","Content-Type":"application/json"}};try{const t=await this.context.spHttpClient.post(this.contextInfoUrl,i.SPHttpClient.configurations.v1,e);if(!t.ok)throw new Error(`Error fetching context info: ${t.status} ${t.statusText}`);const n=(await t.json()).FormDigestValue;if(!n)throw new Error("FormDigestValue is missing in the context info response.");return this.formDigest=n,n}catch(e){throw a.Log.error(r,e),e}}async getUserProfileProperty(e){var t;if(a.Environment.type!==a.EnvironmentType.SharePoint&&a.Environment.type!==a.EnvironmentType.ClassicSharePoint)return a.Log.warn(r,"Not running in a SharePoint environment"),null;try{await this.getFormDigest();const n='\n        <Request AddExpandoFieldTypeSuffix="true"\n                 SchemaVersion="15.0.0.0"\n                 LibraryVersion="16.0.0.0"\n                 ApplicationName=".NET Library"\n                 xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">\n          <Actions>\n            <ObjectPath Id="2" ObjectPathId="1" />\n            <ObjectPath Id="4" ObjectPathId="3" />\n            <Query Id="5" ObjectPathId="3">\n              <Query SelectAllProperties="false">\n                <Properties>\n                  <Property Name="AccountName" ScalarProperty="true" />\n                  <Property Name="UserProfileProperties" ScalarProperty="true" />\n                </Properties>\n              </Query>\n            </Query>\n          </Actions>\n          <ObjectPaths>\n            <Constructor Id="1" TypeId="{cf560d69-0fdb-4489-a216-b6b47adf8ef8}" />\n            <Method Id="3" ParentId="1" Name="GetMyProperties" />\n          </ObjectPaths>\n        </Request>',o={headers:{Accept:"application/json","Content-Type":"text/xml","X-RequestDigest":this.formDigest},body:n},s=await this.context.spHttpClient.post(this.clientServiceUrl,i.SPHttpClient.configurations.v1,o);if(!s.ok)throw new Error(`Error fetching user profile property: ${s.status} ${s.statusText}`);const c=(await s.json()).filter(e=>"SP.UserProfiles.PersonProperties"===(null==e?void 0:e._ObjectType_));return c.length>0?null!==(t=c[0].UserProfileProperties[e])&&void 0!==t?t:null:(a.Log.warn(r,`User profile property "${e}" not found in the response`),null)}catch(e){return a.Log.error(r,e),null}}async setUserProfileProperty(e,t,n){if(a.Environment.type!==a.EnvironmentType.SharePoint&&a.Environment.type!==a.EnvironmentType.ClassicSharePoint)return a.Log.warn(r,"Not running in a SharePoint environment"),!1;try{await this.getFormDigest();const a=`\n        <Request AddExpandoFieldTypeSuffix="true"\n                 SchemaVersion="15.0.0.0"\n                 LibraryVersion="16.0.0.0"\n                 ApplicationName=".NET Library"\n                 xmlns="http://schemas.microsoft.com/sharepoint/clientquery/2009">\n          <Actions>\n            <Method Name="SetSingleValueProfileProperty" Id="7" ObjectPathId="1">\n              <Parameters>\n                <Parameter Type="String">i:0#.f|membership|${encodeURIComponent(this.context.pageContext.user.loginName)}</Parameter>\n                <Parameter Type="String">${this.escapeXml(e)}</Parameter>\n                <Parameter Type="${this.escapeXml(t)}">${this.escapeXml(n)}</Parameter>\n              </Parameters>\n            </Method>\n          </Actions>\n          <ObjectPaths>\n            <Constructor Id="1" TypeId="{cf560d69-0fdb-4489-a216-b6b47adf8ef8}" />\n          </ObjectPaths>\n        </Request>`,r={headers:{Accept:"application/json","Content-Type":"text/xml","X-RequestDigest":this.formDigest},body:a},o=await this.context.spHttpClient.post(this.clientServiceUrl,i.SPHttpClient.configurations.v1,r);if(!o.ok)throw new Error(`Error setting user profile property: ${o.status} ${o.statusText}`);const s=(await o.json())[0];return null===(null==s?void 0:s.ErrorInfo)}catch(e){return a.Log.error(r,e),!1}}escapeXml(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}}}
}]);